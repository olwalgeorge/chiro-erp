version: "3.8"

# Production Docker Compose for Chiro ERP
# Optimized for performance, security, and monitoring

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================

  postgres:
    image: postgres:15-alpine
    container_name: chiro-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./scripts/sql:/docker-entrypoint-initdb.d:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - chiro-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  redis:
    image: redis:7-alpine
    container_name: chiro-redis-prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - chiro-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: chiro-zookeeper-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
      ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL: ERROR
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - chiro-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: chiro-kafka-prod
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
      # Production optimizations
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "unset JMX_PORT; kafka-topics --bootstrap-server localhost:29092 --list",
        ]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 120s
    networks:
      - chiro-backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.75"

  # =============================================================================
  # CONSOLIDATED SERVICES
  # =============================================================================

  core-business-service:
    build:
      context: .
      dockerfile: Dockerfile.consolidated
      args:
        SERVICE_NAME: core-business-service
        SERVICE_PORT: 8080
        BUILD_PROFILE: prod
      target: runtime
    container_name: chiro-core-business-prod
    environment:
      # Database Configuration
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${DB_NAME}
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      QUARKUS_DATASOURCE_DB_KIND: postgresql

      # Kafka Configuration
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

      # Production Settings
      QUARKUS_PROFILE: prod
      QUARKUS_LOG_LEVEL: INFO
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8080

      # Performance optimizations
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: none
      QUARKUS_HIBERNATE_ORM_SQL_LOAD_SCRIPT: no-file

      # JVM optimizations for production
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication -Djava.security.egd=file:/dev/./urandom"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chiro-backend
      - chiro-frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.75"
        reservations:
          memory: 512M
          cpus: "0.25"

  operations-management-service:
    build:
      context: .
      dockerfile: Dockerfile.consolidated
      args:
        SERVICE_NAME: operations-management-service
        SERVICE_PORT: 8081
        BUILD_PROFILE: prod
      target: runtime
    container_name: chiro-operations-prod
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${DB_NAME}
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_PROFILE: prod
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8081
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chiro-backend
      - chiro-frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.75"

  customer-relations-service:
    build:
      context: .
      dockerfile: Dockerfile.consolidated
      args:
        SERVICE_NAME: customer-relations-service
        SERVICE_PORT: 8082
        BUILD_PROFILE: prod
      target: runtime
    container_name: chiro-customer-relations-prod
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${DB_NAME}
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_PROFILE: prod
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8082
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chiro-backend
      - chiro-frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.75"

  platform-services:
    build:
      context: .
      dockerfile: Dockerfile.consolidated
      args:
        SERVICE_NAME: platform-services
        SERVICE_PORT: 8083
        BUILD_PROFILE: prod
      target: runtime
    container_name: chiro-platform-services-prod
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${DB_NAME}
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_PROFILE: prod
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8083
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chiro-backend
      - chiro-frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.75"

  workforce-management-service:
    build:
      context: .
      dockerfile: Dockerfile.consolidated
      args:
        SERVICE_NAME: workforce-management-service
        SERVICE_PORT: 8084
        BUILD_PROFILE: prod
      target: runtime
    container_name: chiro-workforce-prod
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${DB_NAME}
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_PROFILE: prod
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8084
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chiro-backend
      - chiro-frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.75"

  # =============================================================================
  # API GATEWAY & LOAD BALANCER
  # =============================================================================

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: docker/Dockerfile
    container_name: chiro-api-gateway-prod
    ports:
      - "${API_GATEWAY_PORT:-80}:8080"
    environment:
      # Service Discovery
      CORE_BUSINESS_SERVICE_URL: http://core-business-service:8080
      OPERATIONS_SERVICE_URL: http://operations-management-service:8081
      CUSTOMER_RELATIONS_SERVICE_URL: http://customer-relations-service:8082
      PLATFORM_SERVICES_URL: http://platform-services:8083
      WORKFORCE_SERVICE_URL: http://workforce-management-service:8084

      # Production Settings
      QUARKUS_PROFILE: prod
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8080
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"

      # Rate limiting and security
      QUARKUS_HTTP_LIMITS_MAX_BODY_SIZE: 10M
      QUARKUS_HTTP_LIMITS_MAX_HEADER_SIZE: 20K
    depends_on:
      - core-business-service
      - operations-management-service
      - customer-relations-service
      - platform-services
      - workforce-management-service
    networks:
      - chiro-frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: chiro-prometheus-prod
    volumes:
      - ./config/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--storage.tsdb.retention.size=10GB"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    networks:
      - chiro-monitoring
      - chiro-frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  grafana:
    image: grafana/grafana:latest
    container_name: chiro-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - chiro-monitoring
      - chiro-frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: chiro-loki-prod
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - chiro-monitoring
    restart: unless-stopped

  # Reverse Proxy & SSL Termination
  nginx:
    image: nginx:alpine
    container_name: chiro-nginx-prod
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-gateway
      - grafana
    networks:
      - chiro-frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.25"

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================

networks:
  chiro-frontend:
    driver: bridge
    name: chiro-erp-frontend
  chiro-backend:
    driver: bridge
    name: chiro-erp-backend
    internal: true
  chiro-monitoring:
    driver: bridge
    name: chiro-erp-monitoring

volumes:
  postgres_data:
    name: chiro-postgres-prod-data
  redis_data:
    name: chiro-redis-prod-data
  kafka_data:
    name: chiro-kafka-prod-data
  zookeeper_data:
    name: chiro-zookeeper-prod-data
  zookeeper_logs:
    name: chiro-zookeeper-prod-logs
  prometheus_data:
    name: chiro-prometheus-prod-data
  grafana_data:
    name: chiro-grafana-prod-data
  loki_data:
    name: chiro-loki-prod-data
  nginx_logs:
    name: chiro-nginx-prod-logs
