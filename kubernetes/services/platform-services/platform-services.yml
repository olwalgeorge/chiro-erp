apiVersion: v1
kind: Service
metadata:
  name: platform-services
  namespace: chiro-erp
  labels:
    app: platform-services
    service: platform-services
    version: v1
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8084
    protocol: TCP
    name: http
  selector:
    app: platform-services
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-services
  namespace: chiro-erp
  labels:
    app: platform-services
    service: platform-services
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: platform-services
      version: v1
  template:
    metadata:
      labels:
        app: platform-services
        service: platform-services
        version: v1
    spec:
      containers:
      - name: platform-services
        image: chiro-erp/platform-services:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8084
          protocol: TCP
        env:
        - name: QUARKUS_PROFILE
          value: "prod"
        - name: QUARKUS_HTTP_PORT
          value: "8084"
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: host
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: port
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: bootstrap-servers
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8084
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8084
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      restartPolicy: Always
