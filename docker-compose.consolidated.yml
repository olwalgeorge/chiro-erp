version: "3.8"

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: chiro_erp
      POSTGRES_USER: chiro_user
      POSTGRES_PASSWORD: chiro_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql

  # Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Consolidated Services
  core-business-service:
    build:
      context: .
      dockerfile: Dockerfile.multi
      args:
        SERVICE_NAME: core-business-service
    ports:
      - "8080:8080"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/chiro_core_business
      QUARKUS_DATASOURCE_USERNAME: chiro_user
      QUARKUS_DATASOURCE_PASSWORD: chiro_password
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - postgres
      - kafka

  operations-management-service:
    build:
      context: .
      dockerfile: Dockerfile.multi
      args:
        SERVICE_NAME: operations-management-service
    ports:
      - "8081:8081"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/chiro_operations
      QUARKUS_DATASOURCE_USERNAME: chiro_user
      QUARKUS_DATASOURCE_PASSWORD: chiro_password
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - postgres
      - kafka

  customer-relations-service:
    build:
      context: .
      dockerfile: Dockerfile.multi
      args:
        SERVICE_NAME: customer-relations-service
    ports:
      - "8082:8082"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/chiro_customer_relations
      QUARKUS_DATASOURCE_USERNAME: chiro_user
      QUARKUS_DATASOURCE_PASSWORD: chiro_password
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - postgres
      - kafka

  platform-services:
    build:
      context: .
      dockerfile: Dockerfile.multi
      args:
        SERVICE_NAME: platform-services
    ports:
      - "8083:8083"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/chiro_platform
      QUARKUS_DATASOURCE_USERNAME: chiro_user
      QUARKUS_DATASOURCE_PASSWORD: chiro_password
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - postgres
      - kafka

  workforce-management-service:
    build:
      context: .
      dockerfile: Dockerfile.multi
      args:
        SERVICE_NAME: workforce-management-service
    ports:
      - "8084:8084"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/chiro_workforce
      QUARKUS_DATASOURCE_USERNAME: chiro_user
      QUARKUS_DATASOURCE_PASSWORD: chiro_password
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - postgres
      - kafka

  # API Gateway (remains separate)
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/docker/Dockerfile
    ports:
      - "8090:8080"
    environment:
      CORE_BUSINESS_SERVICE_URL: http://core-business-service:8080
      OPERATIONS_SERVICE_URL: http://operations-management-service:8081
      CUSTOMER_RELATIONS_SERVICE_URL: http://customer-relations-service:8082
      PLATFORM_SERVICES_URL: http://platform-services:8083
      WORKFORCE_SERVICE_URL: http://workforce-management-service:8084
    depends_on:
      - core-business-service
      - operations-management-service
      - customer-relations-service
      - platform-services
      - workforce-management-service

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin

volumes:
  postgres_data:
