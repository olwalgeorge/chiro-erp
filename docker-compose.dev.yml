services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================

  postgres:
    image: postgres:15-alpine
    container_name: chiro-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-chiro_erp}
      POSTGRES_USER: ${DB_USERNAME:-chiro}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-chiro_dev_password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-chiro}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chiro-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: chiro-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - chiro-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: chiro-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chiro-network

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: chiro-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "unset JMX_PORT; kafka-topics --bootstrap-server localhost:9092 --list",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - chiro-network

  # Kafka UI for development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: chiro-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "${KAFKA_UI_PORT:-8090}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - chiro-network

  # =============================================================================
  # OBSERVABILITY SERVICES
  # =============================================================================

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: chiro-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    networks:
      - chiro-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: chiro-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - chiro-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: chiro-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - chiro-network

  # =============================================================================
  # API GATEWAY
  # =============================================================================

  api-gateway:
    build:
      context: .
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: chiro-api-gateway
    ports:
      - "8080:8080"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-chiro_erp}
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME:-chiro}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD:-chiro_dev_password}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chiro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # CORE SERVICES (Will be added as they're developed)
  # =============================================================================

  # user-management-service:
  #   build:
  #     context: ./services/user-management-service
  #     dockerfile: ../../src/main/docker/Dockerfile.jvm
  #   container_name: chiro-user-management
  #   ports:
  #     - "8081:8080"
  #   environment:
  #     QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-chiro_erp}
  #     QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME:-chiro}
  #     QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD:-chiro_dev_password}
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - chiro-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  chiro-network:
    driver: bridge
