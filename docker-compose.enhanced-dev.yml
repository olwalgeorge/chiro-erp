version: "3.8"

# Enhanced Docker Compose for Consolidated Services Development
# Optimized for hot reload, debugging, and local development

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================

  postgres:
    image: postgres:15-alpine
    container_name: chiro-postgres-dev
    environment:
      POSTGRES_DB: ${DB_NAME:-chiro_erp}
      POSTGRES_USER: ${DB_USERNAME:-chiro}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-chiro_dev_pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USERNAME:-chiro} -d ${DB_NAME:-chiro_erp}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - chiro-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: chiro-redis-dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - chiro-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: chiro-zookeeper-dev
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chiro-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: chiro-kafka-dev
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "unset JMX_PORT; kafka-topics --bootstrap-server localhost:9092 --list",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - chiro-network
    restart: unless-stopped

  # =============================================================================
  # CONSOLIDATED SERVICES
  # =============================================================================

  core-business-service:
    build:
      context: .
      dockerfile: Dockerfile.consolidated
      args:
        SERVICE_NAME: core-business-service
        SERVICE_PORT: 8080
      target: runtime
    container_name: chiro-core-business-dev
    ports:
      - "8080:8080"
      - "5005:5005" # Debug port
    environment:
      # Database Configuration
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/chiro_erp
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME:-chiro}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD:-chiro_dev_pass}

      # Kafka Configuration
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

      # Development Settings
      QUARKUS_PROFILE: dev
      QUARKUS_LOG_LEVEL: INFO
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8080

      # Debug Configuration
      JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"

      # Health checks
      QUARKUS_HEALTH_ENABLED: "true"
      QUARKUS_METRICS_ENABLED: "true"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chiro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  operations-management-service:
    build:
      context: .
      dockerfile: Dockerfile.consolidated
      args:
        SERVICE_NAME: operations-management-service
        SERVICE_PORT: 8081
      target: runtime
    container_name: chiro-operations-dev
    ports:
      - "8081:8081"
      - "5006:5006" # Debug port
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/chiro_erp
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME:-chiro}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD:-chiro_dev_pass}
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_PROFILE: dev
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8081
      JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chiro-network
    restart: unless-stopped

  customer-relations-service:
    build:
      context: .
      dockerfile: Dockerfile.consolidated
      args:
        SERVICE_NAME: customer-relations-service
        SERVICE_PORT: 8082
      target: runtime
    container_name: chiro-customer-relations-dev
    ports:
      - "8082:8082"
      - "5007:5007" # Debug port
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/chiro_erp
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME:-chiro}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD:-chiro_dev_pass}
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_PROFILE: dev
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8082
      JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chiro-network
    restart: unless-stopped

  platform-services:
    build:
      context: .
      dockerfile: Dockerfile.consolidated
      args:
        SERVICE_NAME: platform-services
        SERVICE_PORT: 8083
      target: runtime
    container_name: chiro-platform-services-dev
    ports:
      - "8083:8083"
      - "5008:5008" # Debug port
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/chiro_erp
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME:-chiro}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD:-chiro_dev_pass}
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_PROFILE: dev
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8083
      JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chiro-network
    restart: unless-stopped

  workforce-management-service:
    build:
      context: .
      dockerfile: Dockerfile.consolidated
      args:
        SERVICE_NAME: workforce-management-service
        SERVICE_PORT: 8084
      target: runtime
    container_name: chiro-workforce-dev
    ports:
      - "8084:8084"
      - "5009:5009" # Debug port
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/chiro_erp
      QUARKUS_DATASOURCE_USERNAME: ${DB_USERNAME:-chiro}
      QUARKUS_DATASOURCE_PASSWORD: ${DB_PASSWORD:-chiro_dev_pass}
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_PROFILE: dev
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8084
      JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5009"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - chiro-network
    restart: unless-stopped

  # =============================================================================
  # API GATEWAY
  # =============================================================================

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: docker/Dockerfile
    container_name: chiro-api-gateway-dev
    ports:
      - "8090:8080"
      - "5010:5010" # Debug port
    environment:
      # Service Discovery
      CORE_BUSINESS_SERVICE_URL: http://core-business-service:8080
      OPERATIONS_SERVICE_URL: http://operations-management-service:8081
      CUSTOMER_RELATIONS_SERVICE_URL: http://customer-relations-service:8082
      PLATFORM_SERVICES_URL: http://platform-services:8083
      WORKFORCE_SERVICE_URL: http://workforce-management-service:8084

      # Development Settings
      QUARKUS_PROFILE: dev
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8080
      JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5010"
    depends_on:
      - core-business-service
      - operations-management-service
      - customer-relations-service
      - platform-services
      - workforce-management-service
    networks:
      - chiro-network
    restart: unless-stopped

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: chiro-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - chiro-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: chiro-grafana-dev
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - chiro-network
    restart: unless-stopped

  # Development Tools
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: chiro-kafka-ui-dev
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8091:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - chiro-network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chiro-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@chiro.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8092:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chiro-network
    restart: unless-stopped

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================

networks:
  chiro-network:
    driver: bridge
    name: chiro-erp-network

volumes:
  postgres_data:
    name: chiro-postgres-data
  redis_data:
    name: chiro-redis-data
  prometheus_data:
    name: chiro-prometheus-data
  grafana_data:
    name: chiro-grafana-data
  pgadmin_data:
    name: chiro-pgadmin-data
