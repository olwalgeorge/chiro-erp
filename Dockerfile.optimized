# =============================================================================
# CHIRO ERP - OPTIMIZED CONSOLIDATED DOCKERFILE
# =============================================================================
# This is the SINGLE, DEFINITIVE Dockerfile for all consolidated services
# Optimized to handle Kotlin compilation and resource constraints

ARG JAVA_VERSION=21
ARG GRADLE_VERSION=8.5

# =============================================================================
# Build Stage - Resource-optimized build environment
# =============================================================================
FROM gradle:${GRADLE_VERSION}-jdk${JAVA_VERSION}-alpine AS builder

# Build arguments
ARG SERVICE_NAME
ARG BUILD_PROFILE=prod

WORKDIR /build

# Install additional tools for better resource management
RUN apk add --no-cache curl procps

# Security: Create dedicated build user with error handling
RUN (addgroup -g 1001 -S builduser 2>/dev/null || addgroup -S builduser) && \
    (adduser -u 1001 -S builduser -G builduser -h /build 2>/dev/null || adduser -S builduser -G builduser -h /build) && \
    chown -R builduser:builduser /build

# Copy gradle wrapper and core files first (better caching)
COPY --chown=builduser:builduser gradlew gradlew.bat ./
COPY --chown=builduser:builduser gradle/ ./gradle/
COPY --chown=builduser:builduser build.gradle.kts settings.gradle.kts gradle.properties ./

# Copy buildSrc (required for custom plugins)
COPY --chown=builduser:builduser buildSrc/ ./buildSrc/

# Fix line endings and permissions
RUN sed -i 's/\r$//' ./gradlew && chmod +x ./gradlew

# Switch to build user
USER builduser

# Pre-download dependencies with optimal settings
RUN ./gradlew dependencies \
    --no-daemon \
    --no-parallel \
    --max-workers=1 \
    -Dorg.gradle.jvmargs="-Xmx1g -XX:MaxMetaspaceSize=256m" \
    --quiet || true

# Copy only the specific service we're building (reduces context size)
COPY --chown=builduser:builduser consolidated-services/${SERVICE_NAME}/ ./consolidated-services/${SERVICE_NAME}/

# Validate SERVICE_NAME argument
RUN if [ -z "$SERVICE_NAME" ]; then \
    echo "ERROR: SERVICE_NAME build argument is required"; \
    echo "Available services: core-business-service, operations-management-service, customer-relations-service, platform-services, workforce-management-service"; \
    exit 1; \
    fi

# Build specific service with resource-optimized settings
RUN echo "Building service: $SERVICE_NAME" && \
    ./gradlew :consolidated-services:${SERVICE_NAME}:build \
    -Dquarkus.package.type=uber-jar \
    --no-daemon \
    --no-parallel \
    --max-workers=1 \
    -Dorg.gradle.jvmargs="-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+UseG1GC" \
    -Dkotlin.compiler.execution.strategy=in-process \
    -Dkotlin.daemon.jvm.options="-Xmx1g" \
    --info

# Verify the build artifact exists
RUN ls -la consolidated-services/${SERVICE_NAME}/build/ && \
    find consolidated-services/${SERVICE_NAME}/build -name "*-runner.jar" -type f

# =============================================================================
# Runtime Stage - Production-optimized
# =============================================================================
FROM eclipse-temurin:${JAVA_VERSION}-jre-alpine AS runtime

ARG SERVICE_NAME
ARG SERVICE_PORT=8080

# Labels for better container management
LABEL org.opencontainers.image.title="Chiro ERP - ${SERVICE_NAME}"
LABEL org.opencontainers.image.description="Consolidated ${SERVICE_NAME} for Chiro ERP"
LABEL org.opencontainers.image.vendor="Chiro ERP"
LABEL org.opencontainers.image.service="${SERVICE_NAME}"
LABEL org.opencontainers.image.version="1.0.0"

WORKDIR /app

# Security hardening and essential tools
RUN apk update && \
    apk upgrade --available && \
    apk add --no-cache \
    curl \
    dumb-init \
    tzdata \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Set timezone
ENV TZ=UTC

# Create application user with proper error handling
RUN (addgroup -g 1001 -S appuser 2>/dev/null || true) && \
    (adduser -u 1001 -S appuser -G appuser -h /app 2>/dev/null || true) && \
    chown -R 1001:1001 /app

# Copy built application with verification
COPY --from=builder --chown=appuser:appuser \
    /build/consolidated-services/${SERVICE_NAME}/build/*-runner.jar \
    /app/application.jar

# Verify application jar exists and is readable
RUN ls -la /app/application.jar && file /app/application.jar

# Create comprehensive health check script
RUN echo '#!/bin/sh' > /app/healthcheck.sh && \
    echo 'set -e' >> /app/healthcheck.sh && \
    echo 'curl -f http://localhost:8080/q/health/ready || exit 1' >> /app/healthcheck.sh && \
    echo 'curl -f http://localhost:8080/q/health/live || exit 1' >> /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh && \
    chown 1001:1001 /app/healthcheck.sh

# Create startup script with logging
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'set -e' >> /app/start.sh && \
    echo 'echo "Starting Chiro ERP service: ${SERVICE_NAME}"' >> /app/start.sh && \
    echo 'echo "Java version: $(java -version 2>&1 | head -n 1)"' >> /app/start.sh && \
    echo 'echo "Available memory: $(free -h | grep Mem)"' >> /app/start.sh && \
    echo 'echo "Application jar size: $(ls -lh /app/application.jar | awk '"'"'{print $5}'"'"')"' >> /app/start.sh && \
    echo 'exec java $JAVA_OPTS -jar /app/application.jar' >> /app/start.sh && \
    chmod +x /app/start.sh && \
    chown 1001:1001 /app/start.sh

# Switch to non-root user
USER appuser

# Expose port
EXPOSE ${SERVICE_PORT}

# Health check with proper timing
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=5 \
    CMD /app/healthcheck.sh

# Optimized JVM settings for containers
ENV JAVA_OPTS="-XX:+UseContainerSupport \
    -XX:MaxRAMPercentage=75.0 \
    -XX:+UseG1GC \
    -XX:+UseStringDeduplication \
    -XX:+PrintGCDetails \
    -XX:+PrintGCTimeStamps \
    -Djava.security.egd=file:/dev/./urandom \
    -Dquarkus.http.host=0.0.0.0 \
    -Dquarkus.http.port=${SERVICE_PORT} \
    -Dquarkus.log.level=INFO \
    -Dquarkus.log.console.enable=true"

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/start.sh"]
